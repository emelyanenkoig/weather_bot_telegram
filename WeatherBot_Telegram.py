import requests
import datetime
from config import bot_token, weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import locale


bot = Bot(token=bot_token)
dp = Dispatcher(bot)
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply(
        'üèô –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≥–æ—Ä–æ–¥a</b> –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!\n\nüìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≥–µ–æ–ø–æ–∑–∏—Ü–∏—é</b>, –∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ '
        '–ø–æ–≥–æ–¥—ã!', reply_markup=main_btn(), parse_mode='html')
    await bot.delete_message(message.chat.id, message.message_id)


@dp.message_handler(content_types=['location'])
async def get_weather_geo(message: types.Message):
    code_to_smile = {
        'Clear': "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        'Clouds': "–û–±–ª–∞—á–Ω–æ ‚õÖÔ∏è",
        'Rain': "–î–æ–∂–¥—å üåß",
        'Drizzle': "–ú–æ—Ä–æ—Å–Ω—è üåß",
        'Thunderstorm': "–ì—Ä–æ–∑–∞ ‚õà",
        'Snow': "–°–Ω–µ–≥ üå®",
        'Mist': "–¢—É–º–∞–Ω üå´",
        'Fog': "–¢—É–º–∞–Ω üå´"
    }

    try:
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?lat={message.location.latitude}&lon={message.location.longitude}&appid={weather_token}&units'
            f'=metric'
        )
        data = r.json()

        city = data['name']
        curr_temp = data['main']['temp']
        weather_description = data['weather'][0]['main']

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º!'

        curr_temp_min = data['main']['temp_min']
        curr_temp_max = data['main']['temp_max']
        curr_wind = data['wind']['speed']
        sunrise = datetime.datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
        sunset = datetime.datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
        length_of_the_day = datetime.datetime.fromtimestamp(
            data['sys']['sunset']) - datetime.datetime.fromtimestamp(
            data['sys']['sunrise'])

        await message.reply(f"<b>–°–µ–≥–æ–¥–Ω—è</b>:\n"
                            f"{datetime.datetime.now().strftime('%d %B %Y')}\n\n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{curr_temp} C¬∞</b>\n"
                            f"{wd}\n"
                            f"–ú–∏–Ω. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {curr_temp_min} C¬∞\n–ú–∞–∫—Å. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {curr_temp_max} C¬∞\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {curr_wind} –º/—Å\n\n"
                            f"–†–∞—Å—Å–≤–µ—Ç: {sunrise}\n–ó–∞–∫–∞—Ç: {sunset}\n"
                            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n", parse_mode='html')

    except:
        await message.reply("üò≤ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üò≤")


@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        'Clear': "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        'Clouds': "–û–±–ª–∞—á–Ω–æ ‚õÖÔ∏è",
        'Rain': "–î–æ–∂–¥—å üåß",
        'Drizzle': "–ú–æ—Ä–æ—Å–Ω—è üåß",
        'Thunderstorm': "–ì—Ä–æ–∑–∞ ‚õà",
        'Snow': "–°–Ω–µ–≥ üå®",
        'Mist': "–¢—É–º–∞–Ω üå´",
        'Fog': "–¢—É–º–∞–Ω üå´"
    }

    try:
        r = requests.get(
            f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&limit={1}&appid={weather_token}&units'
            f'=metric')
        data = r.json()

        city = data['name']
        curr_temp = data['main']['temp']
        weather_description = data['weather'][0]['main']

        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º!'

        curr_temp_min = data['main']['temp_min']
        curr_temp_max = data['main']['temp_max']
        curr_wind = data['wind']['speed']
        sunrise = datetime.datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
        sunset = datetime.datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
        length_of_the_day = datetime.datetime.fromtimestamp(
            data['sys']['sunset']) - datetime.datetime.fromtimestamp(
            data['sys']['sunrise'])

        await message.reply(f"<b>–°–µ–≥–æ–¥–Ω—è</b>:\n"
                            f"{datetime.datetime.now().strftime('%d %B %Y')}\n\n"
                            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{curr_temp} C¬∞</b>\n"
                            f"{wd}\n"
                            f"–ú–∏–Ω. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {curr_temp_min} C¬∞\n–ú–∞–∫—Å. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {curr_temp_max} C¬∞\n"
                            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {curr_wind} –º/—Å\n\n"
                            f"–†–∞—Å—Å–≤–µ—Ç: {sunrise}\n–ó–∞–∫–∞—Ç: {sunset}\n"
                            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n", parse_mode='html')

    except:
        await message.reply("üò≤ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üò≤")


def main_btn():
    geo = types.KeyboardButton('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è üìç', request_location=True)
    city = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
    city2 = types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
    city3 = types.KeyboardButton('–≠–ª–∏—Å—Ç–∞')
    main_btn = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_btn.row(city, city3)
    main_btn.insert(city2)
    main_btn.insert(geo)
    return main_btn


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
